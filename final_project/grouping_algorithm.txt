// Grouping algorithm

// nodes are objects that contain groups of people
//   nodes contain 4 values:
//		radius, lat, lng, members
//		members is an array:
//			members[i].name, members[i].lat, members[i].lng
// all_nodes is an array containing all nodes

// - - - - - - - Constants - - - - - - - >
OUTER = 0.25 // (mi) starting radius of every node
SMALLRAD = 1.0 // (mi) radius with large number of people
BIGPEOPLE = 20 // number of people that will break up group if radius is 1.0 or bigger
BIGRAD = 2.0 // (mi) radius with any amout of people

function dist (lat1, lng1, lat2, lng2)
{
	var R = 6371; // kM
	var dLat = (lat2 - lat1) * pi() / 180;
	var dLng = (lng2 - lng1) * pi() / 180;
	var lat1 = lat1 * pi() / 180;
	var lat2 = lat2 * pi() / 180;
	
	var a = sin(dLat/2) * sin(dLat/2) + sin(dLng/2) * sin(dLng/2) * cos(lat1) * cos(lat2);
	var c = 2 * atan2(sqrt(a), sqrt(1 - a)); // Note the atan2 and not atan (there are two arguments)
	
	var d = R * c;
	return d;
}

function alone (username, lat, lng)
{
	var new_node = new Node;
	new_node.radius = OUTER;
	new_node.lat = lat;
	new_node.lng = lng;
	
	i = all_nodes.length;
	new_node.members[i].name = username;
	new_node.members[i].lat = lat;
	new_node.members[i].lng = lng;
	
	if (i == NULL)
	{
		i = 0;
	}
	
	all_nodes[i] = new_node;
}

function add_person (username, lat, lng)
{
	if (all_nodes.length == 0)
	{
		alone (username, lat, lng);
	}
	else
	{
		var closest = 0; // number of the node that is closest to the new person
		for (var i = 0; i < all_nodes.length; i++)
		{
			if (all_nodes[i] < all_nodes[closest])
			{
				closest = i;
			}
		}
		
		var dist_to_closest = dist(lat, lng, all_nodes[closest].lat, all_nodes[closest].lng);
		
		if (dist_to_closest < all_nodes[closest].radius) // Person is within the radius
		{
			add_to_node (all_nodes[closest], username, lat, lng);
		}
	}
}

function add_to_node (cur_node, username, lat, lng);
{
	var num = cur_node.members.length;
	var person = cur_node.members[num];
	person.name = username;
	person.lat = lat;
	person.lng = lng;
	
	// - - - Calculate a new center and radius - - - //
	var far_person_num = 0.25 + get_farthest_person (cur_node);
	var far_person = cur_node.members[far_person_num];
	
	var new_lat = average_lat (cur_node);
	var new_lng = average_lng (cur_node);
	var new_radius = dist (far_person.lat, far_person.lng, new_lat, new_lng);
	
	cur_node.lat = new_lat;
	cur_node.lng = new_lng;
	cur_node.radius = new_radius;
}

function average_lat (cur_node)
{
	var sum = 0;
	var i = 0;
	
	for (i = 0; i < cur_node.members.length; i++)
	{
		sum += cur_nod.members[i].lat;
	}
	
	if (i == 0)
	{
		return cur_node.members[i].lat;
	}
	else
	{
		return sum / i;
	}
}

function average_lng (cur_node)
{
	var sum = 0;
	var i = 0;
	
	for (i = 0; i < cur_node.members.length; i++)
	{
		sum += cur_nod.members[i].lng;
	}
	
	if (i == 0)
	{
		return cur_node.members[i].lng;
	}
	else
	{
		return sum / i;
	}
}

function get_farthest_person (cur_node)
{
	var i = 0;
	var cur_dist;
	cur_member = cur_node.members[i];
	var far_dist = dist (cur_member.lat, cur_member.lng, cur_node.lat, cur_node.lng);
	var far_person = i;
	
	for (i = 0; i < cur_node.members.length; i++)
	{
		cur_member = cur_node.members[i];
		cur_dist = dist (cur_member.lat, cur_member.lng, cur_node.lat, cur_node.lng);
		if (cur_dist > far_dist)
		{	
			far_dist = cur_dist;
			far_person = i;
		}
	}
	
	return far_person;
}

// - - - - - - - - Other functions - - - - - - - - - //

function break_up (cur_node)
{
	var r = cur_node.radius;
	var num_people = cur_node.members.length + 1;
	var far_person_num;
	
	if ( ((r > SMALLRAD) && (num_people > BIGPEOPLE)) || (r > BIGRAD) )
	{
		get_farthest_person (cur_node);
	}
}







